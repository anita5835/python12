# -*- coding: utf-8 -*-
"""practical12.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-MdpQHyBvwwemMvOTk0MPJCo8j1EU1A3
"""

#lambda function
#small anonymous function

#lambda keyword.........can pass argument in key value pair.
#syntax
#lambda arguments(x,y):code_to_run
a=lambda x,y:x-y
a(5,7)

a=lambda x,y:x*y
a(5,4)

a=lambda x: x
a("hello")

a=lambda r:22/7*r*r
a(7)

a=lambda a,b,c:a*b*c
a(2,4,2)

#recursive function......when functions are called in themselves
def factorial(n):
 if n==0 or n==1:
  return 1
 else:
  return n*factorial(n-1)

factorial(5)

factorial(6)

#fibonacci series
def fibonacci(n):
  if n<=0:
    return 0
  elif n==1:
    return 1
  else:
    return fibonacci(n-1)+(n-2)

fibonacci(3)

#1. Write a Python program to calculate the sum of a list of numbers using recursion.

def sum_list(list):
  if  len(list)==0:
   return 0
  elif len(list)==1:
   return list[0]
  else:
    return list[0]+sum_list(list[1:])

sum_list([1,2,3,4,5,6])

# 2. Write a Python program to solve the Fibonacci sequence using recursion.
def fibonacci_s(n):
 if n==0:
   return 0
 elif n==1:
   return 1
 else:
   return (n-1)+(n-2)

fibonacci_s(4)

# 3. Write a Python program to get the factorial of a non-negative integer using recursion.
def factorial1(n):
 if  n<=0:
    return 0
 elif n==1:
    return 1
 else:
    return n*factorial1(n-1)

factorial1(6)

# 4. Write a Python program to calculate the sum of harmonic series upto n terms.
# Note: The harmonic sum is the sum of reciprocals of the positive integers.

def harmonic_sum(n):
    if n == 1:
        return 1
    else:
        return 1 / n + harmonic_sum(n - 1)

print(harmonic_sum(4))

# 4. Write a Python program to calculate the value of 'a' to the power of 'b' using recursion.
# Test Data :
# # (power(3,4) -> 81
def power(n,a):
  if a==1:
    return n
  else:
    return n* power(n,a-1)

power(3,4)

